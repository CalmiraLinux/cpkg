#!/bin/bash
#
# CPkg - an automated packaging tool fog Calmira Linux
# Cooyright (C) 2021 Michail Krasnov
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Project Page: http://github.com/Linuxoid85/cpkg
# Michail Krasnov (aka Linuxoid85) michail383krasnov@mail.ru
#

#==================================================================#
#
# LOAD SCRIPT CONFIGURATIONS
#

# CONF - configuration directory
# SOURCE - a mirror of Calmira
CONF=/etc/cpkg
SOURCE=$CONF/pkg.list
DATABASE=/var/db/cpkg
QUIET="true"	# turn off quiet mode (default)
DBG="false"	# turn off debug mode (default)
CLEAN="false"	# turn off cleaning cache (default)
NCURSES="false"	# turn off pseudographic mode (default)
GetCalmiraVersion=$DISTRIB_RELEASE

if test -f "/usr/share/cpkg/locale/$LANG.sh"; then
    source /usr/share/cpkg/locale/$LANG.sh
else
    echo -e "\e[1;31mERROR: locale $LANG.sh doesn't exists!"
    exit 0
fi

for FUNC in "other-functions.sh" "core-functions.sh"; do
	if test -f "/usr/lib/cpkg/$FUNC"; then
		source /usr/lib/cpkg/$FUNC		# Load the additional/other cpkg functions
	else
		echo -e "$ERROR_NO_FUNC"
		exit 0
	fi
done

if [[ $(whoami) -eq "root" ]]; then	# get log directory
	LOG_DIR=/var/log/
else
	LOG_DIR=~/.local/share/cpkg/log
	if test -d $LOG_DIR; then
		print_dbg_msg "$DONE"
	else
		print_dbg_msg "$RETRY"
		mkdir -p $LOG_DIR
	fi
fi

print_dbg_msg "testing cpkg files... "
if test -f "/etc/cpkg/settings"; then
	print_dbg_msg "$DONE"
	source /etc/cpkg/settings
else
	print_dbg_msg "$FAIL"
fi

source /etc/lsb-release				# Load the system information

check_file

#==================================================================#
#
# COMMAND LINE PARSING
#

if [ $# -eq 0 ]; then
	help_pkg
fi

# Options
while [ -n "$1" ]; do
	case $1 in
		install|-i)
			test_root
			echo -e "[ $(date) ] [ $ACTION_INSTALL $2 ]\n" >> $LOG_DIR/history.log

			# Clean package cache
			if [ $CLEAN = "true" ]; then
				print_dbg_msg "clean package cache..."
				cache_clean
			fi
			
			search_pkg $2	# Search the package
			unpack_pkg $2	# Unpack the package
			cd /var/cache/cpkg/archives
			install_pkg $2
		;;

		remove|-r)
			test_root
			echo -e "[ $(date) ] [ $ACTION_REMOVE $2 ]\n" >> $LOG_DIR/history.log
			remove_pkg $2	# Remove
		;;

		download|-d)
			test_root
			# Clean package cache
			if [[ $CLEAN -eq "true" ]]; then
				cache_clean
			fi

			echo -e "[ $(date) ] [ $ACTION_DOWNLOAD $2 ]\n" >> $LOG_DIR/history.log
			download_pkg $2
		;;
		
		local_repo)
			test_root
      		    if test -f /usr/bin/git; then
		        mkdir -pv /var/cache/cpkg/localrepo
		        cd /var/cache/cpkg/localrepo
		        git clone https://github.com/Linuxoid85/cpkg_packages
		        if test -d "cpkg_packages"; then
		        	print_msg "$DONE"
		        else
		        	print_msg "$FAIL"
		        fi
		    else
                	PACKAGE=git
		        print_msg "$ERROR_PACKAGE_NOT_INSTALLED"
		        unset PACKAGE
		        exit 0
		    fi
		;;

		update)
			test_root
        		echo -e "[ $(date) ] [ $ACTION_UPDATE_LIST ]\n" >> $LOG_DIR/history.log
			cd /etc/cpkg
			rm -vf pkg.list
			print_msg -n "$PKGLIST_DOWNLOAD"
			wget https://raw.githubusercontent.com/Linuxoid85/cpkg_packages/main/calmira2021/pkg.list
			if test -f pkg.list; then
				print_msg "$DONE"
			else
				print_msg "$FAIL"
			fi
		;;

		list|-l)
			echo -e "[ $(date) ] [ $ACTION_LIST ]\n" >> $LOG_DIR/history.log
			file_list --verbose=on
		;;

		search|-s)
			echo -e "[ $(date) ] [ $ACTION_SEARCH $2 ]\n" >> $LOG_DIR/history.log
			file_list --verbose=on |grep $2
		;;

		info|-I)
			echo -e "[ $(date) ] [ $ACTION_INFO $2 ]\n" >> $LOG_DIR/history.log
			package_info $2
		;;

		clean|-C)
			echo -e "[ $(date) ] [ $ACTION_CLEAN ]\n" >> $LOG_DIR/history.log
			cache_clean
		;;

		help)
			help_pkg
		;;
		
		--quiet)
			QUIET="true"
		;;
		
		--debug)
			DBG="true"
		;;


		### INSTALL OPTIONS ###

		--clean|-c)	# Clean cache before installation
			CLEAN="true"
		;;

		*)
			echo -e "[ $(date) ] [ $ACTION_UKNOWN_OPTION '$@' ]\n" >> $LOG_DIR/history.log
			echo -e "$ERROR_NO_OPTION"
			help_pkg
		;;
	esac

	exit 0
done		
